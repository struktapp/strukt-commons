<?php

use Strukt\Type\Json;

class JsonAssertTest extends PHPUnit\Framework\TestCase{

	protected $class;

	public function setUp():void{

		$this->class = array(

			"declaration"=>array(

				"namespace"=>Payroll\AuthModule\Router::class,
				"name"=>"Index",
				"extends"=>"AbstractRouter",
				"use"=>array(

					Psr\Http\Message\RequestInterface::class,
					Psr\Http\Message\ResponseInterface::class,
					"Contract\Router as AbstractRouter"
				)
			),
			"properties"=>array(

				array(

					"access"=>"private",
					"scope"=>"static",
					"name"=>"name",
					"value"=>"\"Payroll\AuthModule\Router\Index\""
				),
				array(

					"name"=>"autoGenerated",
					"value"=>"true"
				)
			),
			"methods"=>array(

				array(

					"name"=>"welcome", 
					"params"=>null,
					"body"=>"//",
					"annotations"=>array(

						"Route"=>"/",
						"Method"=>array(

							"GET", 
							"POST"
						),
						"Provides"=>"application/json",
						"Middleware"=>array("AuthToken", "GVerify")
					)
				),
				array(

					"name"=>"hello", 
					"params"=>array("to"), 
					"body"=>"//",
					"annotations"=>array(

						"Route"=>"/hello/{to:alpha}",
						"Method"=>array(

							"GET", 
							"POST"
						),
						"Provides"=>"application/html",
						"Middlewares"=>array("A", "B","C")
					)
				),
				array(

					"name"=>"login", 
					"params"=>array(

						"username", 
						"password"
					),
					"body"=>"//",
					"annotations"=>array(
						
						"Route"=>"/login",
						"Method"=>"GET",
						"Secure"=>array(

							"username"=>"admin",
							"password"=>"p@55w0rd"
						),
						"Expects"=>array(

							"username",
							"password"
						)
					)
				)
			)
		);

	}

	public function testAssert(){

		$json = attest($this->class);
		$d = $json->assert("declaration", function($a){

			return $a->assertAll([
				"namespace",
				"name",
				"extends",
				"use"
			]);
		});

		$this->assertTrue($d);

		$d = $json->assert("properties", function($a){

			return attest($a->first())->assert("access", fn($a)=>$a->has("private"));
		});

		$this->assertTrue($d);
	}
}